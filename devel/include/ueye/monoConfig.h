//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the ueye package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __ueye__MONOCONFIG_H__
#define __ueye__MONOCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace ueye
{
  class monoConfigStatics;
  
  class monoConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(monoConfig &config, const monoConfig &max, const monoConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const monoConfig &config1, const monoConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, monoConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const monoConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, monoConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const monoConfig &config) const = 0;
      virtual void getValue(const monoConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T monoConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (monoConfig::* field);

      virtual void clamp(monoConfig &config, const monoConfig &max, const monoConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const monoConfig &config1, const monoConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, monoConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const monoConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, monoConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const monoConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const monoConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, monoConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, monoConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<monoConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(monoConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("config_path"==(*_i)->name){config_path = boost::any_cast<std::string>(val);}
        if("color"==(*_i)->name){color = boost::any_cast<int>(val);}
        if("trigger"==(*_i)->name){trigger = boost::any_cast<int>(val);}
        if("force_streaming"==(*_i)->name){force_streaming = boost::any_cast<bool>(val);}
        if("hardware_gamma"==(*_i)->name){hardware_gamma = boost::any_cast<bool>(val);}
        if("auto_exposure"==(*_i)->name){auto_exposure = boost::any_cast<bool>(val);}
        if("exposure_time"==(*_i)->name){exposure_time = boost::any_cast<double>(val);}
        if("gain_boost"==(*_i)->name){gain_boost = boost::any_cast<bool>(val);}
        if("auto_gain"==(*_i)->name){auto_gain = boost::any_cast<bool>(val);}
        if("gain"==(*_i)->name){gain = boost::any_cast<int>(val);}
        if("zoom"==(*_i)->name){zoom = boost::any_cast<int>(val);}
        if("frame_rate"==(*_i)->name){frame_rate = boost::any_cast<double>(val);}
        if("pixel_clock"==(*_i)->name){pixel_clock = boost::any_cast<int>(val);}
        if("frame_id"==(*_i)->name){frame_id = boost::any_cast<std::string>(val);}
      }
    }

    std::string config_path;
int color;
int trigger;
bool force_streaming;
bool hardware_gamma;
bool auto_exposure;
double exposure_time;
bool gain_boost;
bool auto_gain;
int gain;
int zoom;
double frame_rate;
int pixel_clock;
std::string frame_id;

    bool state;
    std::string name;

    
}groups;



//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string config_path;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int trigger;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool force_streaming;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool hardware_gamma;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_exposure;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double exposure_time;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool gain_boost;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_gain;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int gain;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int zoom;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double frame_rate;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int pixel_clock;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string frame_id;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("monoConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const monoConfig &__max__ = __getMax__();
      const monoConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const monoConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const monoConfig &__getDefault__();
    static const monoConfig &__getMax__();
    static const monoConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const monoConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void monoConfig::ParamDescription<std::string>::clamp(monoConfig &config, const monoConfig &max, const monoConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class monoConfigStatics
  {
    friend class monoConfig;
    
    monoConfigStatics()
    {
monoConfig::GroupDescription<monoConfig::DEFAULT, monoConfig> Default("Default", "", 0, 0, true, &monoConfig::groups);
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.config_path = "";
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.config_path = "";
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.config_path = "";
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<std::string>("config_path", "str", 0, "Path to load and store cfg files.", "", &monoConfig::config_path)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<std::string>("config_path", "str", 0, "Path to load and store cfg files.", "", &monoConfig::config_path)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color = -2147483648;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color = 2147483647;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color = 6;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<int>("color", "int", 0, "Color mode", "{'enum_description': 'Enum to set color mode', 'enum': [{'srcline': 16, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_MONO8'}, {'srcline': 17, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_MONO16'}, {'srcline': 18, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_YUV'}, {'srcline': 19, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_YCbCr'}, {'srcline': 20, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_BGR5'}, {'srcline': 21, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_BGR565'}, {'srcline': 22, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_BGR8'}, {'srcline': 23, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_BGRA8'}, {'srcline': 24, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_BGRY8'}, {'srcline': 25, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_RGB8'}, {'srcline': 26, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 10, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_RGBA8'}, {'srcline': 27, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 11, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_RGBY8'}]}", &monoConfig::color)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<int>("color", "int", 0, "Color mode", "{'enum_description': 'Enum to set color mode', 'enum': [{'srcline': 16, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_MONO8'}, {'srcline': 17, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_MONO16'}, {'srcline': 18, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_YUV'}, {'srcline': 19, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_YCbCr'}, {'srcline': 20, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_BGR5'}, {'srcline': 21, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_BGR565'}, {'srcline': 22, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_BGR8'}, {'srcline': 23, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_BGRA8'}, {'srcline': 24, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_BGRY8'}, {'srcline': 25, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_RGB8'}, {'srcline': 26, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 10, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_RGBA8'}, {'srcline': 27, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 11, 'ctype': 'int', 'type': 'int', 'name': 'COLOR_RGBY8'}]}", &monoConfig::color)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trigger = -2147483648;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trigger = 2147483647;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trigger = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<int>("trigger", "int", 0, "Trigger mode", "{'enum_description': 'Enum to set trigger mode', 'enum': [{'srcline': 11, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'TGR_AUTO'}, {'srcline': 12, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'TGR_HARDWARE_RISING'}, {'srcline': 13, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'TGR_HARDWARE_FALLING'}]}", &monoConfig::trigger)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<int>("trigger", "int", 0, "Trigger mode", "{'enum_description': 'Enum to set trigger mode', 'enum': [{'srcline': 11, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'TGR_AUTO'}, {'srcline': 12, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'TGR_HARDWARE_RISING'}, {'srcline': 13, 'description': '', 'srcfile': '/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'TGR_HARDWARE_FALLING'}]}", &monoConfig::trigger)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.force_streaming = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.force_streaming = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.force_streaming = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<bool>("force_streaming", "bool", 0, "Force the camera to stream images.", "", &monoConfig::force_streaming)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<bool>("force_streaming", "bool", 0, "Force the camera to stream images.", "", &monoConfig::force_streaming)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.hardware_gamma = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.hardware_gamma = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.hardware_gamma = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<bool>("hardware_gamma", "bool", 0, "Sets the camera hardware gamma correction.", "", &monoConfig::hardware_gamma)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<bool>("hardware_gamma", "bool", 0, "Sets the camera hardware gamma correction.", "", &monoConfig::hardware_gamma)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_exposure = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_exposure = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_exposure = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<bool>("auto_exposure", "bool", 0, "Sets the camera exposure duration to automatic.", "", &monoConfig::auto_exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<bool>("auto_exposure", "bool", 0, "Sets the camera exposure duration to automatic.", "", &monoConfig::auto_exposure)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_time = 0.06;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_time = 200.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_time = 85.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<double>("exposure_time", "double", 0, "Sets the camera exposure time (ms)", "", &monoConfig::exposure_time)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<double>("exposure_time", "double", 0, "Sets the camera exposure time (ms)", "", &monoConfig::exposure_time)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain_boost = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain_boost = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain_boost = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<bool>("gain_boost", "bool", 0, "Enables constant hardware analog boost.", "", &monoConfig::gain_boost)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<bool>("gain_boost", "bool", 0, "Enables constant hardware analog boost.", "", &monoConfig::gain_boost)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_gain = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_gain = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_gain = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<bool>("auto_gain", "bool", 0, "Sets the image to automatic.", "", &monoConfig::auto_gain)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<bool>("auto_gain", "bool", 0, "Sets the image to automatic.", "", &monoConfig::auto_gain)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain = 100;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain = 400;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain = 100;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<int>("gain", "int", 0, "Sets the image gain", "", &monoConfig::gain)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<int>("gain", "int", 0, "Sets the image gain", "", &monoConfig::gain)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.zoom = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.zoom = 16;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.zoom = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<int>("zoom", "int", 0, "The zoom level. (Global binning)", "", &monoConfig::zoom)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<int>("zoom", "int", 0, "The zoom level. (Global binning)", "", &monoConfig::zoom)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.frame_rate = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.frame_rate = 240.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.frame_rate = 30.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<double>("frame_rate", "double", 0, "Sets the expected triggering rate ", "", &monoConfig::frame_rate)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<double>("frame_rate", "double", 0, "Sets the expected triggering rate ", "", &monoConfig::frame_rate)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pixel_clock = 5;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pixel_clock = 86;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pixel_clock = 86;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<int>("pixel_clock", "int", 0, "Pixel clock speed in MHz", "", &monoConfig::pixel_clock)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<int>("pixel_clock", "int", 0, "Pixel clock speed in MHz", "", &monoConfig::pixel_clock)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.frame_id = "";
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.frame_id = "";
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.frame_id = "/camera";
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<std::string>("frame_id", "str", 0, "The optical camera tf frame set in message headers.", "", &monoConfig::frame_id)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(monoConfig::AbstractParamDescriptionConstPtr(new monoConfig::ParamDescription<std::string>("frame_id", "str", 0, "The optical camera tf frame set in message headers.", "", &monoConfig::frame_id)));
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(monoConfig::AbstractGroupDescriptionConstPtr(new monoConfig::GroupDescription<monoConfig::DEFAULT, monoConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<monoConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<monoConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<monoConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    monoConfig __max__;
    monoConfig __min__;
    monoConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const monoConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static monoConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &monoConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const monoConfig &monoConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const monoConfig &monoConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const monoConfig &monoConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<monoConfig::AbstractParamDescriptionConstPtr> &monoConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<monoConfig::AbstractGroupDescriptionConstPtr> &monoConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const monoConfigStatics *monoConfig::__get_statics__()
  {
    const static monoConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = monoConfigStatics::get_instance();
    
    return statics;
  }

//#line 11 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_TGR_AUTO = 0;
//#line 12 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_TGR_HARDWARE_RISING = 2;
//#line 13 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_TGR_HARDWARE_FALLING = 3;
//#line 16 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_COLOR_MONO8 = 0;
//#line 17 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_COLOR_MONO16 = 1;
//#line 18 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_COLOR_YUV = 2;
//#line 19 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_COLOR_YCbCr = 3;
//#line 20 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_COLOR_BGR5 = 4;
//#line 21 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_COLOR_BGR565 = 5;
//#line 22 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_COLOR_BGR8 = 6;
//#line 23 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_COLOR_BGRA8 = 7;
//#line 24 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_COLOR_BGRY8 = 8;
//#line 25 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_COLOR_RGB8 = 9;
//#line 26 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_COLOR_RGBA8 = 10;
//#line 27 "/home/daan/ros/src/ueye_camera/kmhallen-ueye-973c73c2bfce/cfg/mono.cfg"
      const int mono_COLOR_RGBY8 = 11;
}

#endif // __MONORECONFIGURATOR_H__
